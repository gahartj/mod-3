1. In your own words, explain what clean code is and why it is important.

Clean code is programming that is easy to read, change, and maintain, regardless of whether it is you or another professional working on the code. Without clean code, what should be simple tasks can quickly turn into tedious ones that waste time and energy.

1. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

First thing that comes to my mind is street lights. Most us of drive to and from work everyday, and we probably encounter several (or many) stop lights. If there are any malfunctions to street lights, specifically due to poorly written code and poor testing, it's easy to see how accidents could happen.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

No- I would not consider this code to be clean. The abundance of comments is a red flag for me. If there's that much need for commenting, then the code can probably be written better, specifically the variables and the naming of the function can be improved. All of the variable names are just letters, and we can make them specific to task that we're working on. Refactored:

FUNCTION fahrenheitToCelsius (temperature1, temperature2)
  IF temperature1 = "F" THEN
  SET degreesFahrenheit to (temperature2 - 32) * (5/9)
  PRINT degreesFahrenheit
  ELSE IF temperature1 = "C" THEN
  SET degreesCelsuis to temperature2 * 1.8000 + 32.00
  PRINT degreesCelsuis
  END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

No- in naming the function, I wouldn't use an abbreviation for calculate (calc). Otherwise, pretty good.

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactored:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
  total = subTotal * discountRate + (subTotal * tax)
  PRINT "Your total due is: " + total

  IF paymentType = 'CASH' THEN
  	CALL getPayment RETURNING amount 
  	 PRINT "Change due: " + amount – total

  ELSE IF paymentType = 'CREDIT CARD' THEN
  	CALL getPayment RETURNING amount
  	 PRINT "Your credit card has been charged: " + total

  END IF
END FUNCTION

b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Refactored:

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND guest.outstandingFees = 0 AND NOT guest.hasOverdueBooks THEN
       APPEND book to guest.books
       SET book.status to "Checked Out"
       PRINT "Your books have been issued."
  ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactored:

CLASS AccountInformation

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

END CLASS

CLASS AccountAction

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END CLASS

CLASS Offers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 END CLASS

 ....
 ....
 ....

END


###Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function perfectSquare(numbers){
 let sum = 0;

  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }

  if (sum > 0 && Math.sqrt(sum) % 1 === 0) { //Math.sqrt(sum) % 1 === 0 is to get the number with integer
    return(Math.sqrt(sum));
  } else {
    return sum;
  }
}

let numbers = [1,2,3,3];

console.log(perfectSquare(numbers));//returns 3

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicates(integers) {
    let duplicates = [];
    for(let i = 0; i <= integers.length; i++) {
        if(duplicates[integers[i]] === undefined) {
            duplicates[integers[i]] = 1;
        } else {
            return true;
        }
    }
    return false;
}

let integers = [1,2,3,3];

console.log(findDuplicates(integers));//returns true
