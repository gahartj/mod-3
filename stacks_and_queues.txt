####Exercises

1. What is the main difference between a stack and a queue?

  Stack uses the last-in-first-out principle, whereas queue uses first-in-first-out. Stack uses push and pop to insert and delete items...queue uses enqueue and dequeue for the same purpose. Where objects are inserted and removed also differs between stack and queues. In a stack, an object is removed from the top. In queue, an object is removed from the beginning. Objects are pushed on top of the "collection" when inserted in a stack, and is the opposite for a queue (at the end).

2. What are the similarities between stacks and queues?

  They both are a collection of objects, and both have devices to easily insert and remove items from those collections. They are also similar in that they are both an attempt to work with your data in a more efficient manner.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

  I would use stack for undo and a queue for redo. In a word processor, if we want to undo what we last did, a stack makes sense because the last item entry is the first item out, therefore, whatever was most recently entered would be the first to go, or be undone. Redo would be the opposite- we would be using first in first out.

####Programming Questions

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

  function reverse(words) {
      let stack = [];
      // push letter into stack
      for (let i = 0; i < words.length; i++) {
          stack.push(words[i]);
      }
      // pop letter from the stack
      let reverseWords = '';
      while (stack.length > 0) {
          reverseWords += stack.pop();
      }
      return reverseWords;
  }

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

  class Stack {
      constructor()  {
       this.pop = function(queue) {

         let newQueue = [];
         let itemToDelete = [];

         for (var i=0; i < queue.length; i++) {
           if (i == queue.length-1) {
             itemToDelete.push(queue[i]);
           } else {
             newQueue.push(queue[i]);
           }
         }

         return itemToDelete;

       }
     }
   }

  let stack = new Stack();
  console.log(stack.pop('Jake'));//logs "e"


>To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

  class Queue {
    constructor(name) {
      this.name = name;
    }

    enqueue(name) {
      this.name.push(name)
      return this.name;
    }

    dequeue() {
      this.name.splice(0,1);
      return this.name;
    }
  }

  let theAvengers = new Queue(['Stark', 'Cap', 'Thor', 'Hulk']);

  console.log(theAvengers.dequeue('Stark'));//logs ['Cap', 'Thor', 'Hulk']
