1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

  let rideLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

  function newRider(name) {
    rideLine.push(name);
    return rideLine;
  }

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

  function findRider(name) {
    let findRiderName = rideLine.indexOf(name);
    return findRiderName;
  }

  findRider("Josh");// returns 2

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

  function findRider(name) {
    let findRiderName = rideLine.indexOf(name);
    if (findRiderName === -1) {
      return "Not in line!";
    } else {
      return findRiderName;
    }
  }

  findRider("Emily");//returns Not in Line!

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

function cutInLine(inLine, cutter) {
  let friend = findRider(inLine);
  rideLine.splice( friend, 0, cutter );
  return rideLine;
}

cutInLine("Ava", "Melissa");

f) If Patrick wants to leave the line, how would you delete him from the array?

function leaveLine(name) {
  let leaving = findRider(name);
  rideLine.splice( leaving, 1 );
  return rideLine;
}

leaveLine("Patrick");

2. Provide another real-world example that you can model using a data structure.

First example that comes to mind would be a batting order in baseball. The batting order is often manipulated throughout a game, with players substituting in and out, particularly at the pitchers spot. The biggest difference between the example above and a batting order would be the batting order is always nine players (possibly eight if for some reason there are only eight left available to play). A line for a ride at an amusement park would fluctuate in number constantly and with a much larger number being possible.

3. How would your data structure allow developers to access and manipulate the data?

  Similar to the amusement park ride line example, the use of an array as the data structure would easily allow developers to add, delete, or change the batting order with ease.
