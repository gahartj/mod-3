####Exercises

1. What are some pros and cons of using linked lists instead of arrays?

Pros - Elements do not have to shift, like in an array, when items are added or deleted. Linked Lists can grow to much larger sizes as compared to arrays. Inserting and deleting items in a linked list is faster than in an array.

Cons - When trying to find a specific element, you have to start with the first (head) item and search one by one. This is not very efficient. Requires more memory.

2. Come up with a real world example of a linked list.

A music player, like the one we created earlier, could use a linked list. The head and tail of the list(s) are the first and last songs of a playlist or album, respectively.

####Programming Questions

>Before beginning to code, write out a plan explaining how to solve the question.

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

We need a means to move from node to node in the list, in order to set current node to current.next. We can do this with a while loop.

class LinkedListNode {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
    }

    add(data) {
      const newNode = new LinkedListNode(data);

      if (this.head === null) {
        this.head = newNode;
      } else {
        let current = this.head;
        while (current.next !== null) {
          current = current.next;
        }
        current.next = newNode;
      }
   }
}

const avengers = new LinkedList();
avengers.add("Stark");
avengers.add("Banner");
console.log(avengers);


2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

class LinkedListNode {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
    }

    add(data) {
      const newNode = new LinkedListNode(data);

      if (this.head === null) {
        this.head = newNode;
      } else {
        let current = this.head;
        while (current.next !== null) {
          current = current.next;
        }
        current.next = newNode;
      }
   }

   removeDuplicates() {
       let current = this.head;
       while(current != null) {
         if(!current.data) {
           current.data = true;
         } else {
           current = current.next;
           this.size--;
         }
       }
     }

}

let newList = new LinkedList();
newList.add("a");
newList.add("c");
newList.add("d");
newList.add("d");
newList.add("a");
newList.removeDuplicates();
console.log(newList);


3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

let avengers = {
  value: "Stark",
  next: {
    value: "Banner",
    next: {
      value: "Parker",
      next: null
    }
  }
}


function reverseList(list) {
  let node = list;
  let previous = null;

  while(node != null) {
    let nodeNext = node.next;
    node.next = previous;
    previous = node;
    node = nodeNext;
  }
  return previous;
}

console.log(reverseList(avengers));
